# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("LElbowRoll")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ -0.44328, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44328, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44328, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44328, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44175, [ 3, -0.06667, -0.00064], [ 3, 0.04000, 0.00038]], [ -0.44022, [ 3, -0.04000, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.44022, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ -0.44022, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ -0.44328, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44175, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44328, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44328, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LElbowYaw")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ -1.59694, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.59694, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.59694, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.59694, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.59694, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ -1.59847, [ 3, -0.04000, 0.00051], [ 3, 0.04000, -0.00051]], [ -1.60000, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ -1.59847, [ 3, -0.05333, -0.00051], [ 3, 0.05333, 0.00051]], [ -1.59694, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.59694, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.59694, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.59694, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LHand")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 0.00028, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00028, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00028, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00028, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00028, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.00028, [ 3, -0.04000, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.00028, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ 0.00028, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ 0.00028, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00028, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00028, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00028, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LShoulderPitch")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 1.51708, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.51555, [ 3, -0.06667, 0.00153], [ 3, 0.06667, -0.00153]], [ 1.50635, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.50635, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.50481, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ 1.52322, [ 3, -0.04000, 0.00000], [ 3, 0.04000, 0.00000]], [ 1.52322, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ 1.52322, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ 1.50635, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.50635, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.50635, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.50635, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LShoulderRoll")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 0.12268, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.12421, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.12114, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.12268, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.12114, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.13342, [ 3, -0.04000, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.13342, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ 0.13342, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ 0.12268, [ 3, -0.05333, 0.00123], [ 3, 0.06667, -0.00153]], [ 0.12114, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.12268, [ 3, -0.06667, -0.00153], [ 3, 0.06667, 0.00153]], [ 0.13955, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LWristYaw")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 0.02450, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02450, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02450, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02297, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02450, [ 3, -0.06667, -0.00000], [ 3, 0.04000, 0.00000]], [ 0.02450, [ 3, -0.04000, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.02450, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ 0.02450, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ 0.02450, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02450, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02450, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02450, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RElbowRoll")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 1.32849, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.38678, [ 3, -0.06667, -0.02761], [ 3, 0.06667, 0.02761]], [ 1.49416, [ 3, -0.06667, -0.00153], [ 3, 0.06667, 0.00153]], [ 1.49569, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.29781, [ 3, -0.06667, 0.12655], [ 3, 0.04000, -0.07593]], [ 0.88823, [ 3, -0.04000, 0.11377], [ 3, 0.04000, -0.11377]], [ 0.61518, [ 3, -0.04000, 0.06662], [ 3, 0.05333, -0.08883]], [ 0.42189, [ 3, -0.05333, 0.06647], [ 3, 0.05333, -0.06647]], [ 0.21634, [ 3, -0.05333, 0.00614], [ 3, 0.06667, -0.00767]], [ 0.20867, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.22401, [ 3, -0.06667, -0.01534], [ 3, 0.06667, 0.01534]], [ 0.48172, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RElbowYaw")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 1.68889, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.63367, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.94660, [ 3, -0.06667, -0.07533], [ 3, 0.06667, 0.07533]], [ 2.08567, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 2.08567, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ 2.08567, [ 3, -0.04000, 0.00000], [ 3, 0.04000, 0.00000]], [ 2.08567, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ 2.08567, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ 2.08567, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 2.08567, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 2.08567, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.56617, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RHand")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 0.00543, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00543, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00551, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00551, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00551, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ 0.00543, [ 3, -0.04000, 0.00001], [ 3, 0.04000, -0.00001]], [ 0.00542, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ 0.00543, [ 3, -0.05333, -0.00001], [ 3, 0.05333, 0.00001]], [ 0.00551, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00551, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00551, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.00034, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RShoulderPitch")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 0.96493, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.94805, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.99714, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.99714, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.32388, [ 3, -0.06667, -0.09044], [ 3, 0.04000, 0.05427]], [ 1.43126, [ 3, -0.04000, -0.02352], [ 3, 0.04000, 0.02352]], [ 1.46501, [ 3, -0.04000, -0.01030], [ 3, 0.05333, 0.01373]], [ 1.50336, [ 3, -0.05333, -0.01023], [ 3, 0.05333, 0.01023]], [ 1.52637, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.52484, [ 3, -0.06667, 0.00153], [ 3, 0.06667, -0.00153]], [ 1.40979, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 1.50490, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RShoulderRoll")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ 0.22392, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.19324, [ 3, -0.06667, 0.02966], [ 3, 0.06667, -0.02966]], [ 0.04598, [ 3, -0.06667, 0.04321], [ 3, 0.06667, -0.04321]], [ -0.06600, [ 3, -0.06667, 0.11198], [ 3, 0.06667, -0.11198]], [ -0.81153, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.78392, [ 3, -0.04000, -0.01023], [ 3, 0.04000, 0.01023]], [ -0.75017, [ 3, -0.04000, -0.02126], [ 3, 0.05333, 0.02834]], [ -0.63512, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ -0.71795, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.44183, [ 3, -0.06667, -0.08054], [ 3, 0.06667, 0.08054]], [ -0.23474, [ 3, -0.06667, -0.06085], [ 3, 0.06667, 0.06085]], [ -0.07674, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RWristYaw")
times.append([ 0.16000, 0.36000, 0.56000, 0.76000, 0.96000, 1.08000, 1.20000, 1.36000, 1.52000, 1.72000, 1.92000, 2.12000])
keys.append([ [ -1.16742, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.69511, [ 3, -0.06667, 0.01381], [ 3, 0.06667, -0.01381]], [ -1.70892, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -1.70892, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.95112, [ 3, -0.06667, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.97413, [ 3, -0.04000, 0.00000], [ 3, 0.04000, 0.00000]], [ -0.97413, [ 3, -0.04000, 0.00000], [ 3, 0.05333, 0.00000]], [ -0.97413, [ 3, -0.05333, 0.00000], [ 3, 0.05333, 0.00000]], [ -0.95112, [ 3, -0.05333, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.95112, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ -0.95112, [ 3, -0.06667, 0.00000], [ 3, 0.06667, 0.00000]], [ 0.02910, [ 3, -0.06667, 0.00000], [ 3, 0.00000, 0.00000]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  # motion = ALProxy("ALMotion", IP, 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys);
except BaseException, err:
  print err
