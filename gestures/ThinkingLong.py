# Choregraphe bezier export in Python.
from naoqi import ALProxy
names = list()
times = list()
keys = list()

names.append("HeadYaw")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ -0.11345, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.11345, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.11345, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.11345, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.11345, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.00464, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("HeadPitch")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 0.30892, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.30892, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.30892, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.30892, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.30892, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.18719, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LShoulderPitch")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 1.56245, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.56240, [ 3, -0.66667, 0.00005], [ 3, 0.66667, -0.00005]], [ 1.56192, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.56240, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.56192, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.57847, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LShoulderRoll")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 0.19239, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.19243, [ 3, -0.66667, -0.00005], [ 3, 0.66667, 0.00005]], [ 0.19292, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.19243, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.19292, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.17631, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LElbowYaw")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ -1.24663, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -1.24666, [ 3, -0.66667, 0.00003], [ 3, 0.66667, -0.00003]], [ -1.24698, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -1.24666, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -1.24698, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -1.23511, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LElbowRoll")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ -0.59519, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.59521, [ 3, -0.66667, 0.00002], [ 3, 0.66667, -0.00002]], [ -0.59536, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.59521, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.59536, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.59112, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LWristYaw")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 0.10887, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.10887, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.10887, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.10887, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.10887, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.10887, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("LHand")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 0.00405, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00405, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00405, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00405, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00405, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00405, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RShoulderPitch")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ -0.41298, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.41298, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.41298, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.41298, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.41298, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.47242, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RShoulderRoll")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ -0.44259, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.44259, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.44259, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.44259, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.44259, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ -0.12193, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RElbowYaw")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 0.60685, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.60685, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.60685, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.60685, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.60685, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.18732, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RElbowRoll")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 1.39626, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.39626, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.39626, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.39626, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.39626, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.43936, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RWristYaw")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 1.65806, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.65806, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.65806, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.65806, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 1.65806, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.17330, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

names.append("RHand")
times.append([ 2.00000, 4.00000, 6.00000, 8.00000, 10.00000, 12.00000])
keys.append([ [ 0.5, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00209, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.5, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00209, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.5, [ 3, -0.66667, 0.00000], [ 3, 0.66667, 0.00000]], [ 0.00710, [ 3, -0.66667, 0.00000], [ 3, 0.00000, 0.00000]]])

try:
  # uncomment the following line and modify the IP if you use this script outside Choregraphe.
  # motion = ALProxy("ALMotion", IP, 9559)
  motion = ALProxy("ALMotion")
  motion.angleInterpolationBezier(names, times, keys);
except BaseException, err:
  print err
